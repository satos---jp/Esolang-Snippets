#coding: utf-8
t = 100
d = 35
mod = 10


from Tkinter import Tk
r = Tk()
r.clipboard_clear()
s = (
	'>' + '+' * 10 + '[<' + '+' * 10 + '>-]<' + #桁数(100インクリメント)
	'[>' + 
	#現在最左で、カウンタを初期化
	'>' + '+' * 7 + '[<' + '+' * 5 + '>-]<' + #7*5インクリメント
	'[' + 
	#左から右にだんだん低位にビットがならんでいる。
	#各部分で、3マス(カウンタ、作業用、データ)を使う。
	#この時点ではカウンタ部にいることにする。
	'>>' + 
	'[<++>-]<' +  #データを*2して作業用に移動
	'[->+<' * 9 + #内側に入るならば10より多い。そうでないなら引く。残りはデータに入っている。
	'[-' + #もし10以上ならここにいる。で、作業用にmod10が入っている。
	'<<+>>>[-]<[->+<]' + #ので、左のデータをインクリメントする。で、作業用をデータに移す。
	']' * 10 + #閉じる。この時点で作業用にいる。
	'<[->>>+<<<]>>>-' + #で、次のカウンタ部にいる。
	#この部分のmod終り。
	']' + #カウンタ0のとき、移植終了してるので、LSBに入力から1足す。
	',' + '>' + '+' * 8 + '[<' + '-' * 6 + '>-]<' + '[<+>-]' + #たした。
	'<<<' * d + #復帰
	'<-]' +  #100回カウンタをデクリメント
	#この時点で解が入っているので、あとはどうにかして高位から取り出す。
	
	'>' + 
	#現在最左で、カウンタを初期化
	'>' + '+' * 7 + '[<' + '+' * 5 + '>-]<' + #7*5インクリメント
	'[' + 
	'>>' + '<' + '+' * 8 + '[>' + '+' * 6 + '<-]>' + '.' + '<' + #出力。この時点で作業用にいる。
	'<[->>>+<<<]>>>-' + #で、次のカウンタ部にいる。
	']' + #カウンタ0のとき、移植終了してる。
'')
r.clipboard_append(s)

exit(-1)

from Tkinter import Tk
r = Tk()
r.clipboard_clear()
s = (
	'+' * t + #桁数
	'[>' + 
	#現在最左で、カウンタを初期化
	'+' * d + 
	'[' + 
	#左から右にだんだん低位にビットがならんでいる。
	#各部分で、3マス(カウンタ、作業用、データ)を使う。
	#この時点ではカウンタ部にいることにする。
	'>>' + 
	'[<++>-]<' +  #データを*2して作業用に移動
	'[->+<' * 9 + #内側に入るならば10より多い。そうでないなら引く。残りはデータに入っている。
	'[-' + #もし10以上ならここにいる。で、作業用にmod10が入っている。
	'<<+>>>[-]<[->+<]' + #ので、左のデータをインクリメントする。で、作業用をデータに移す。
	']' * 10 + #閉じる。この時点で作業用にいる。
	'<[->>>+<<<]>>>-' + #で、次のカウンタ部にいる。
	#この部分のmod終り。
	']' + #カウンタ0のとき、移植終了してるので、LSBに入力から1足す。
	',' + '-' * 48 + '[<+>-]' + #たした。
	'<<<' * d + #復帰
	'<-]' +  #100回カウンタをデクリメント
	#この時点で解が入っているので、あとはどうにかして高位から取り出す。
	
	'>' + 
	#現在最左で、カウンタを初期化
	'+' * d + 
	'[' + 
	'>>' + '+' * 48 + '.' + '<' + #出力。この時点で作業用にいる。
	'<[->>>+<<<]>>>-' + #で、次のカウンタ部にいる。
	']' + #カウンタ0のとき、移植終了してる。
'')
r.clipboard_append(s)

exit(-1)

print '>' * d * 3
print '+' * t #初期化
print '[<'
print '<'
print '<' * 2 * d
#上から2倍していく。
#2倍して、10より多きければ引く、的な感じで。
#右側スタートで、右側エンド。
s = '>>[<++>-]<'
s += '[->+<' * (mod-1) #内側に入るならば10より多い。そうでないなら引く。
s += '[-<+> >[-]<[->+<]]'
s += ']' * (mod-1)
s += '''>
'''
#これで済んでるはず。
print s * d
print '>,' + '-' * ord('0') + '[<+>-]'
print '''
>-]
'''
#ここまでcalc
print '<' * d * 2


print d * ('+' * ord('0') + '.' + '>>')
